package flwa_to_fsp;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

import com.sun.tools.internal.ws.wsdl.document.jaxws.Exception;

/* This class translates names
 * form their original YAWL form to
 * FSP names according to the names 
 * generated by this tool
*/
public class FLWAtoFSP implements Serializable {
	
	/*
	 *
	 *    API for FLWA
	 * 
	*/
	private static final long serialVersionUID = 1L;



	/* Converts names FWLA -> YAWL2FSP
	 * 
	 * Accepts strings of the form <element_name>.<event>
	 * for instance: "Payment_5.start"
	 * and translates them to whatever name the event
	 * is given in the auto-generated fsp model.
	 * 
	*/
	public String fwla_to_fsp(String name) {
		
		if(name.indexOf('.') == -1)
			throw new java.lang.Error("The supplied string apears not to have the form <object>.<event>");
		
		String object = name.substring(0, name.indexOf('.'));
		String event = name.substring(name.indexOf('.') + 1);
		String _res = null;
		
		if(object == null || object.isEmpty())
			throw new java.lang.Error("The supplied string apears not to have the form <object>.<event>");
		if(event == null || event.isEmpty())
			throw new java.lang.Error("The supplied string apears not to have the form <object>.<event>");
		
		String _object = null;
		if(elemsMap.containsKey(object)) {
			_object = elemsMap.get(object);
		} else if (netsMap.containsKey(object)) {
			_object = netsMap.get(object);
		} else {
			throw new java.lang.Error("No name mapping could be found for " + object);
		}
		assert(_object != null);

		if(renamesMap.containsKey(_object + "." + event)) {
			_res = renamesMap.get(_object + "." + event);
		} else {
			throw new java.lang.Error("No name mapping could be found for " + _object + "." + event);
		}
		assert(_res != null);
			
		return _res;
	}
	
	/* Retrieves an instance of this class from
	 * the given file. FLWA should use this instead of
	 * the default constructor.
	*/	
	public static FLWAtoFSP load(String path) {
		FLWAtoFSP _res;
		try {
			FileInputStream fileIn = new FileInputStream(path);
			ObjectInputStream in = new ObjectInputStream(fileIn);
			_res = (FLWAtoFSP) in.readObject();
			in.close();
			fileIn.close();
		} catch(IOException i) {
			i.printStackTrace();
			return null;
		} catch(ClassNotFoundException c) {
			c.printStackTrace();
			return null;
		}
		return _res;
	}
	
	
	
		
	
	/*
	 *
	 *    API for YAWL2FSP
	 * 
	*/
	
	/** Net names YAWL -> FSP */
	public Map<String,String> netsMap;
	
	/** Elements (tasks, conditions) names YAWL -> FSP */
	public Map<String,String> elemsMap;
	
	/** Name of each start event in FSP */
	public Map<String,String> renamesMap;
	


	public FLWAtoFSP() {
		netsMap = new HashMap<String,String>();
		elemsMap = new HashMap<String,String>();
		renamesMap = new HashMap<String,String>();
	}
				
	@SuppressWarnings("rawtypes")
	public static Map invert(Map m1) {
		HashMap<Object,Object> n = new HashMap<Object, Object>();
		for(Object s : m1.keySet()) {
			n.put(m1.get(s), s);
		}
		return n;
	} 

	@Override
	public String toString() {
		String _sep = " -> ";
		String res = "";
		res += "netsMap\n";
		for(String s : netsMap.keySet()) {
			res += s + _sep + netsMap.get(s) + "\n";
		}
		res += "elemsMap\n";
		for(String s : elemsMap.keySet()) {
			res += s +_sep + elemsMap.get(s) + "\n";
		}
		res += "renamesMap\n";
		for(String s : renamesMap.keySet()) {
			res += s +_sep + renamesMap.get(s) + "\n";
		}
		
		return res;
	}
}
